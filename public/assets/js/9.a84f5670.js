(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{149:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h3",{attrs:{id:"git-general-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-general-commands"}},[t._v("#")]),t._v(" Git: General commands")]),s("ol",[s("li",[t._v("-- pull vs fetch vs merge:")])]),s("p",[s("code",[t._v("Git Pull")]),t._v(": perform as a fetch additionally merge changes into your local branch"),s("br"),t._v("\n("),s("code",[t._v("git pull = git fetch + git merge")]),t._v(")")]),s("p",[s("code",[t._v("Git Fetch")]),t._v(": download any changes to local except for local branch (local branch stay unchanged)")]),s("p",[s("code",[t._v("Git Rebase")]),t._v(": rewrite the changes of one branch onto another without creating a new commit")]),s("p",[s("code",[t._v("Git Merge")]),t._v(": merge changes from remote to local")]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("-- git pull vs git pull rebase:")])]),s("p",[s("code",[t._v("git pull = git fetch + git merge")])]),s("p",[s("code",[t._v("git pull --rebase = git fetch + git rebase")])]),s("p",[t._v("Common usage: "),s("code",[t._v("git pull --rebase")]),t._v(", providing more cleaner and won't impose a "),s("code",[t._v("logical grouping")]),t._v(" on your commits")]),s("p",[t._v("Simple word: "),s("code",[t._v("git pull --rebase")]),t._v(" made "),s("code",[t._v("code reviewer")]),t._v(" life much easier to review the commits")]),s("p",[t._v("*** after git rebase, if we have conflicts, we normally "),s("code",[t._v("git add .")]),t._v(" + "),s("code",[t._v("git rebase --continue")]),t._v(" + "),s("code",[t._v("git push")]),t._v(" ***")]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("-- git push commands:")])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("-u")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" means "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("--set-upstream")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" eg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("git push -u origin master")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("p",[s("code",[t._v("git push origin HEAD")]),t._v(": A handy way to push the current branch to the same name on the remote.")]),s("p",[t._v("git push origin HEAD:master: Push the current branch to the remote ref matching master in the origin repository. This form is convenient to push the current branch without thinking about its local name.")]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("-- How to combine old commits into 1 commit before merge (Equivalent with "),s("code",[t._v("Squash")]),t._v("):")])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("git reset --soft the-commit-hash-before-the-first-commit-for-this-branch")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("p",[t._v("Then, do "),s("code",[t._v("git push -f")]),t._v(" to update code for that branch")]),s("ol",{attrs:{start:"5"}},[s("li",[t._v("-- "),s("code",[t._v("git push --force-with-lease")]),t._v(":")])]),s("p",[t._v("it helps developers to double check whether someone has already push something, (try to avoid overwrite other developer's code)")]),s("ol",{attrs:{start:"6"}},[s("li",[t._v("-- "),s("code",[t._v("git cherry-pick")]),t._v(":")])]),s("p",[t._v("Branch A has 3 commits, Branch B has 6 commits, and we only need Branch B second commit and put into Branch A, this is story case, we can use "),s("code",[t._v("cherry-pick")]),t._v(" command in "),s("code",[t._v("Branch A")]),t._v(". After the cherry-pick, the commit which get cherry picked will be set as the "),s("code",[t._v("topest/latest")]),t._v(" commit for Branch A.")]),s("p",[t._v("If we cherry pick multiple files (this is the command): "),s("code",[t._v("git cherry-pick #hash-1 #hash-2")]),t._v("\nIf we have conflicts during cherry pick, so we "),s("code",[t._v("first")]),t._v(" resolve the conflicts and then use "),s("code",[t._v("git cherry-pick --continue")])]),s("ol",{attrs:{start:"7"}},[s("li",[t._v("-- git revert vs git reset:")])]),s("p",[t._v("*** danger level: checkout -> revert -> reset ***")]),s("p",[t._v("git revert: delete the "),s("code",[t._v("specific")]),t._v(" commit from commit chains, just don't want this specific commit\ngit reset: reset to a specific spot of previous commit, it deletes a range of commits")]),s("p",[t._v("#commit-1 -> #commit-2 -> #commit-3 -> #commit-4")]),s("ul",[s("li",[s("p",[t._v("For git revert, we can revert #commit-3, so #commit-3 will be "),s("code",[t._v("deleted")]),t._v(" and behaves as "),s("code",[t._v("never added before")]),t._v(", and it will add a new "),s("code",[t._v("REVERT-hash-commit")]),t._v(" as latest commit instead of delete the commit which needs to be reverted !!!! Again, if we want to change back, we can revert the "),s("code",[t._v("REVERT-hash-commit")]),t._v(", so we changed back !!")])]),s("li",[s("p",[t._v("For git reset, we can reset #commit-2 as "),s("code",[t._v("HEAD")]),t._v(", so, #commit-3 and #commit-4 are removed forever")])])]),s("p",[t._v("["),s("a",{attrs:{href:"https://www.youtube.com/watch?v=RIYrfkZjWmA&ab_channel=TheNetNinja",target:"_blank"}},[t._v("Reference")]),t._v("]")]),s("ol",{attrs:{start:"8"}},[s("li",[t._v("-- git logs:")])]),s("ul",[s("li",[s("code",[t._v("git reflog")])]),s("li",[s("code",[t._v("git log --oneline")])]),s("li",[s("code",[t._v("git log")])]),s("li",[s("code",[t._v("git diff")])]),s("li",[s("code",[t._v("git show #hash-commit")])])]),s("p",[t._v("*** -- Reference: "),s("a",{attrs:{href:"https://git-scm.com/docs",target:"_blank"}},[t._v("https://git-scm.com/docs")]),t._v(" ***")])])}],!1,null,null,null);e.default=r.exports}}]);