(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{144:function(e,o,c){"use strict";c.r(o);var n=c(0),t=Object(n.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,o=e.$createElement,c=e._self._c||o;return c("div",{staticClass:"content"},[c("h3",{attrs:{id:"docker-basics"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#docker-basics"}},[e._v("#")]),e._v(" Docker Basics")]),c("h4",{attrs:{id:"concept"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[e._v("#")]),e._v(" Concept:")]),c("ul",[c("li",[e._v("like a virtual machine")]),c("li",[e._v("allow developer to packaging up the local application and deploy it to docker environment for running the app")])]),c("h4",{attrs:{id:"common-commands"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#common-commands"}},[e._v("#")]),e._v(" Common Commands:")]),c("ul",[c("li",[c("code",[e._v("docker build -t docker-container-name:latest .")]),e._v(": copy your local app code to docker container")]),c("li",[c("code",[e._v("docker images")]),e._v(": check all images docker are running")]),c("li",[c("code",[e._v("docker ps")]),e._v(": check docker container(s) currently up & running")]),c("li",[c("code",[e._v("docker ps -a")]),e._v(": check all the docker containers (even not running ones)")]),c("li",[c("code",[e._v("docker run -it docker-container-name:latest")]),e._v(": run the docker container !!")]),c("li",[c("code",[e._v("docker stop docker-container-hash-ID")]),e._v(": shutdown docker container from running")]),c("li",[c("code",[e._v("docker container rm docker-container-hash-ID")]),e._v(": remove container from docker containers list")]),c("li",[c("code",[e._v("docker image rm docker-image-hash-ID")]),e._v(": remove docker image from docker images list")]),c("li",[c("code",[e._v("docker container ls -a")]),e._v(": shows all docker containers")]),c("li",[c("code",[e._v("docker pull image-name")]),e._v(": download docker image to local machine [eg: "),c("code",[e._v("docker pull nginx")]),e._v("]")]),c("li",[c("code",[e._v("docker container exec -it container-name bash")]),e._v(": access container from terminal !!!!!!!!")])]),c("h4",{attrs:{id:"docker-configuration-commands"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#docker-configuration-commands"}},[e._v("#")]),e._v(" Docker Configuration Commands:")]),c("ul",[c("li",[c("code",[e._v("FROM")]),e._v(": setup the image (which image is going to be used for this docker configuration) [very first step]")]),c("li",[c("code",[e._v("RUN")]),e._v(": execute the commands on top of the current image")]),c("li",[c("code",[e._v("WORKDIR")]),e._v(": setup working directory for "),c("code",[e._v("RUN")]),e._v(", "),c("code",[e._v("CMD")]),e._v(", "),c("code",[e._v("ENTRYPOINT")]),e._v(", "),c("code",[e._v("COPY")]),e._v(" and "),c("code",[e._v("ADD")]),e._v(" instructions that follow it in the "),c("code",[e._v("Dockerfile")])]),c("li",[c("code",[e._v("COPY")]),e._v(": copy local folder path to contaner folder path (from "),c("code",[e._v("src")]),e._v(" to "),c("code",[e._v("dest")]),e._v(")")]),c("li",[c("code",[e._v("EXPOSE")]),e._v(": tell docker which port need to be listened on at runtime")]),c("li",[c("code",[e._v("ENTRYPOINT")]),e._v(": config execyutable command, such as "),c("code",[e._v("node")])]),c("li",[c("code",[e._v("CMD")]),e._v(": the following commands after entrypoint, eg: "),c("code",[e._v("server/index.js")]),e._v(", so combine together: "),c("code",[e._v("node server/index.js")])]),c("li",[c("code",[e._v("ENV")]),e._v(": setup environment variable for docker container to read/use")]),c("li",[c("code",[e._v("ADD")]),e._v(": copy new files/directories from "),c("code",[e._v("src")]),e._v(" to "),c("code",[e._v("dest")])])]),c("h4",{attrs:{id:"general-findings"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#general-findings"}},[e._v("#")]),e._v(" General findings:")]),c("ul",[c("li",[c("code",[e._v("docker run -d IMAGE")]),e._v(": "),c("code",[e._v("-d")]),e._v(" means "),c("code",[e._v("--detach")]),e._v(", which refers to a docker container runs in the background of your terminal, which will not show input/output logs in terminal. [Reference "),c("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/container_run/",target:"_blank"}},[e._v("here")]),e._v("]")]),c("li",[c("code",[e._v("docker run -i -t debian /bin/bash")]),e._v(": "),c("code",[e._v("-i")]),e._v(" & "),c("code",[e._v("-t")]),e._v(" means we want an interactive session with a "),c("code",[e._v("tty")]),e._v(" attached. "),c("code",[e._v("tty")]),e._v(" means a terminal which allows user to do input and display the output.\nNormally we have "),c("code",[e._v("-it")]),e._v(" command, which means it make container start look like a terminal connection session. [Reference "),c("a",{attrs:{href:"https://stackoverflow.com/questions/30137135/confused-about-docker-t-option-to-allocate-a-pseudo-tty/54254380",target:"_blank"}},[e._v("here")]),e._v("]")])])])}],!1,null,null,null);o.default=t.exports}}]);