(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{146:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h3",{attrs:{id:"net-cqrs-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net-cqrs-pattern"}},[e._v("#")]),e._v(" .Net CQRS Pattern")]),a("h4",{attrs:{id:"simple-understanding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-understanding"}},[e._v("#")]),e._v(" Simple understanding")]),a("ol",[a("li",[a("p",[e._v("Command: modifies state, should not return a value (post data) [POST, PUT, DELETE]")])]),a("li",[a("p",[e._v("Query: answer a question, never modify state (fetch data) [GET]")])])]),a("p",[e._v("Circle Map:")]),a("pre",[a("code",[e._v("              API\n             /   \\\n        Query     Command\n          |          |\n          |        Domain\n          |          |\n    Data Access  Persistence\n")])]),a("p",[e._v("(Read from DB) \\        / (Write to DB)\nDatabase")]),a("p",[e._v("Directions: API -> Command -> Domain -> Persistence -> Database -> Data Access -> Query -> API")]),a("h4",{attrs:{id:"mediator-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mediator-pattern"}},[e._v("#")]),e._v(" Mediator Pattern")]),a("p",[e._v("Basically, we are writing "),a("code",[e._v("Meditor.Send(object)")]),e._v(" inside controller level, and send out to handler to handle the logic.")]),a("p",[e._v("The map: API controller ("),a("code",[e._v("Meditor.Send(object)")]),e._v(") -> object (into handler) -> Handler doing the magic logics -> object (as the handler result) -> API controller (with the response)")]),a("ol",[a("li",[e._v("Command Handler:")])]),a("p",[e._v("Example story:")]),a("p",[e._v("We try to create an activity object inside "),a("code",[e._v("CreateActivityController")]),e._v(", and we send object from Meditor.Send(object). Then we pass it to "),a("code",[e._v("CreateActivityCommandHandler")]),e._v(" in order to save object into database, and return a value back to "),a("code",[e._v("CreateActivityController")]),e._v(" Layer and then once controller knows everything is done, then controller will give a response with "),a("code",[e._v("OK(withReturns)")]),e._v(" to tell API consumer the activity has been created successfully.")]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Query Handler:")])]),a("p",[e._v("Example story:")]),a("p",[e._v("We try to get an activity data from "),a("code",[e._v("GetActivityController")]),e._v(", we pass the data id as object into "),a("code",[e._v("GetActivityCommandHandler")]),e._v(" and inside handler we check whether the activity exists or not, and if activity has been found, we pass it into ActivityDTO ("),a("code",[e._v("Data Transfer Object")]),e._v(") and return ActivityDTO back to "),a("code",[e._v("GetActivityController")]),e._v(". Finally, controller will send "),a("code",[e._v("OK(activity)")]),e._v(" as response back to API consumer.")])])}],!1,null,null,null);t.default=r.exports}}]);