(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{144:function(e,o,t){"use strict";t.r(o);var c=t(0),n=Object(c.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("div",{staticClass:"content"},[t("h3",{attrs:{id:"docker-basics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-basics"}},[e._v("#")]),e._v(" Docker Basics")]),t("h4",{attrs:{id:"concept"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[e._v("#")]),e._v(" Concept:")]),t("ul",[t("li",[e._v("like a virtual machine")]),t("li",[e._v("allow developer to packaging up the local application and deploy it to docker environment for running the app")])]),t("h4",{attrs:{id:"common-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#common-commands"}},[e._v("#")]),e._v(" Common Commands:")]),t("ul",[t("li",[t("code",[e._v("docker build -t docker-container-name:latest .")]),e._v(": copy your local app code to docker container")]),t("li",[t("code",[e._v("docker images")]),e._v(": check all images docker are running")]),t("li",[t("code",[e._v("docker ps")]),e._v(": check docker container(s) currently up & running")]),t("li",[t("code",[e._v("docker ps -a")]),e._v(": check all the docker containers (even not running ones)")]),t("li",[t("code",[e._v("docker run -it -p portYouWant:originalPort docker-container-name:latest")]),e._v(": run the docker container !!")]),t("li",[t("code",[e._v("docker stop docker-container-hash-ID")]),e._v(": shutdown docker container from running")]),t("li",[t("code",[e._v("docker container rm docker-container-hash-ID")]),e._v(": remove container from docker containers list")]),t("li",[t("code",[e._v("docker image rm docker-image-hash-ID")]),e._v(": remove docker image from docker images list")]),t("li",[t("code",[e._v("docker container ls -a")]),e._v(": shows all docker containers")]),t("li",[t("code",[e._v("docker pull image-name")]),e._v(": download docker image to local machine [eg: "),t("code",[e._v("docker pull nginx")]),e._v("]")]),t("li",[t("code",[e._v("docker container exec -it container-name bash")]),e._v(": access container from terminal !!!!!!!!")]),t("li",[t("code",[e._v("docker rm $(docker ps -aq) -f")]),e._v(": remove all the docker containers from your local docker environment")])]),t("h4",{attrs:{id:"docker-configuration-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-configuration-commands"}},[e._v("#")]),e._v(" Docker Configuration Commands:")]),t("ul",[t("li",[t("code",[e._v("FROM")]),e._v(": setup the image (which image is going to be used for this docker configuration) [very first step]")]),t("li",[t("code",[e._v("RUN")]),e._v(": execute the commands on top of the current image")]),t("li",[t("code",[e._v("WORKDIR")]),e._v(": setup working directory for "),t("code",[e._v("RUN")]),e._v(", "),t("code",[e._v("CMD")]),e._v(", "),t("code",[e._v("ENTRYPOINT")]),e._v(", "),t("code",[e._v("COPY")]),e._v(" and "),t("code",[e._v("ADD")]),e._v(" instructions that follow it in the "),t("code",[e._v("Dockerfile")])]),t("li",[t("code",[e._v("COPY")]),e._v(": copy local folder path to container folder path (from "),t("code",[e._v("src")]),e._v(" to "),t("code",[e._v("dest")]),e._v(")")]),t("li",[t("code",[e._v("EXPOSE")]),e._v(": tell docker which port need to be listened on at runtime")]),t("li",[t("code",[e._v("ENTRYPOINT")]),e._v(": config executable command, such as "),t("code",[e._v("node")])]),t("li",[t("code",[e._v("CMD")]),e._v(": the following commands after entrypoint, eg: "),t("code",[e._v("server/index.js")]),e._v(", so combine together: "),t("code",[e._v("node server/index.js")])]),t("li",[t("code",[e._v("ENV")]),e._v(": setup environment variable for docker container to read (use)")]),t("li",[t("code",[e._v("ADD")]),e._v(": copy new files/directories from "),t("code",[e._v("src")]),e._v(" to "),t("code",[e._v("dest")])])]),t("h4",{attrs:{id:"general-findings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#general-findings"}},[e._v("#")]),e._v(" General findings:")]),t("ul",[t("li",[t("code",[e._v("docker run -d IMAGE")]),e._v(": "),t("code",[e._v("-d")]),e._v(" means "),t("code",[e._v("--detach")]),e._v(", which refers to a docker container runs in the background of your terminal, which will not show input/output logs in terminal. [Reference "),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/container_run/",target:"_blank"}},[e._v("here")]),e._v("]")]),t("li",[t("code",[e._v("docker run -i -t debian /bin/bash")]),e._v(": "),t("code",[e._v("-i")]),e._v(" & "),t("code",[e._v("-t")]),e._v(" means we want an interactive session with a "),t("code",[e._v("tty")]),e._v(" attached. "),t("code",[e._v("tty")]),e._v(" means a terminal which allows user to do input and display the output.\nNormally we have "),t("code",[e._v("-it")]),e._v(" command, which means it make container start look like a terminal connection session. [Reference "),t("a",{attrs:{href:"https://stackoverflow.com/questions/30137135/confused-about-docker-t-option-to-allocate-a-pseudo-tty/54254380",target:"_blank"}},[e._v("here")]),e._v("]")]),t("li",[e._v("Why we need docker-compose? "),t("code",[e._v("docker-compose")]),e._v(" is a "),t("code",[e._v("tool")]),e._v(" for running multiple containers at the same time")]),t("li",[e._v("How to create volume locally?")])]),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("docker volume create "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("localstore\n")])])]),t("ul",[t("li",[e._v("Recent Practice: "),t("a",{attrs:{href:"https://github.com/DamengRandom/docker-node-mongo",target:"_blank"}},[e._v("Run A Simple Node API Locally by using Express + MongoDB + Docker")])])])])}],!1,null,null,null);o.default=n.exports}}]);