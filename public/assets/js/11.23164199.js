(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{151:function(e,t,s){"use strict";s.r(t);var a=s(0),o=Object(a.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h3",{attrs:{id:"git-general-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-general-commands"}},[e._v("#")]),e._v(" Git: General commands")]),s("p",[s("b",[e._v("1.")]),e._v(" -- pull vs fetch vs merge:")]),s("p",[s("code",[e._v("Git Pull")]),e._v(": perform as a fetch additionally merge changes into your local branch"),s("br"),e._v("\n("),s("code",[e._v("git pull = git fetch + git merge")]),e._v(")")]),s("p",[s("code",[e._v("Git Fetch")]),e._v(": download any changes to local except for local branch (local branch stay unchanged)")]),s("p",[s("code",[e._v("Git Rebase")]),e._v(": rewrite the changes of one branch onto another without creating a new commit")]),s("p",[s("code",[e._v("Git Merge")]),e._v(": merge changes from remote to local")]),s("p",[s("b",[e._v("2.")]),e._v(" -- git pull vs git pull rebase:")]),s("p",[s("code",[e._v("git pull = git fetch + git merge")])]),s("p",[s("code",[e._v("git pull --rebase = git fetch + git rebase")])]),s("p",[e._v("Common usage: "),s("code",[e._v("git pull --rebase")]),e._v(", providing more cleaner and won't impose a "),s("code",[e._v("logical grouping")]),e._v(" on your commits")]),s("p",[e._v("Simple word: "),s("code",[e._v("git pull --rebase")]),e._v(" made "),s("code",[e._v("code reviewer")]),e._v(" life much easier to review the commits")]),s("p",[e._v("*** after git rebase, if we have conflicts, we normally "),s("code",[e._v("git add .")]),e._v(" + "),s("code",[e._v("git rebase --continue")]),e._v(" + "),s("code",[e._v("git push")]),e._v(" ***")]),s("p",[s("b",[e._v("3.")]),e._v(" -- git push commands:")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("u"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("-u")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),e._v(" means "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("--set-upstream")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" eg"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("git push -u origin master")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),e._v("\n")])])]),s("p",[s("code",[e._v("git push origin HEAD")]),e._v(": A handy way to push the current branch to the same name on the remote.")]),s("p",[e._v("git push origin HEAD:master: Push the current branch to the remote ref matching master in the origin repository. This form is convenient to push the current branch without thinking about its local name.")]),s("p",[s("b",[e._v("4.")]),e._v(" -- How to combine old commits into 1 commit before merge (Equivalent with "),s("code",[e._v("Squash")]),e._v("):")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("git reset --soft the-commit-hash-before-the-first-commit-for-this-branch")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),e._v("\n")])])]),s("p",[e._v("Then, do "),s("code",[e._v("git push -f")]),e._v(" to update code for that branch")]),s("p",[s("b",[e._v("5.")]),e._v(" -- "),s("code",[e._v("git push --force-with-lease")]),e._v(":")]),s("p",[e._v("it helps developers to double check whether someone has already push something, (try to avoid overwrite other developer's code)")]),s("p",[s("b",[e._v("6.")]),e._v(" -- "),s("code",[e._v("git cherry-pick")]),e._v(":")]),s("p",[e._v("Branch A has 3 commits, Branch B has 6 commits, and we only need Branch B second commit and put into Branch A, this is story case, we can use "),s("code",[e._v("cherry-pick")]),e._v(" command in "),s("code",[e._v("Branch A")]),e._v(". After the cherry-pick, the commit which get cherry picked will be set as the "),s("code",[e._v("topest/latest")]),e._v(" commit for Branch A.")]),s("p",[e._v("If we cherry pick multiple files (this is the command): "),s("code",[e._v("git cherry-pick #hash-1 #hash-2")]),e._v("\nIf we have conflicts during cherry pick, so we "),s("code",[e._v("first")]),e._v(" resolve the conflicts and then use "),s("code",[e._v("git cherry-pick --continue")])]),s("p",[s("b",[e._v("7.")]),e._v(" -- git revert vs git reset:")]),s("p",[e._v("*** danger level: checkout -> revert -> reset ***")]),s("p",[e._v("git revert: delete the "),s("code",[e._v("specific")]),e._v(" commit from commit chains, just don't want this specific commit\ngit reset: reset to a specific spot of previous commit, it deletes a range of commits")]),s("p",[e._v("#commit-1 -> #commit-2 -> #commit-3 -> #commit-4")]),s("ul",[s("li",[s("p",[e._v("For git revert, we can revert #commit-3, so #commit-3 will be "),s("code",[e._v("deleted")]),e._v(" and behaves as "),s("code",[e._v("never added before")]),e._v(", and it will add a new "),s("code",[e._v("REVERT-hash-commit")]),e._v(" as latest commit instead of delete the commit which needs to be reverted !!!! Again, if we want to change back, we can revert the "),s("code",[e._v("REVERT-hash-commit")]),e._v(", so we changed back !!")])]),s("li",[s("p",[e._v("For git reset, we can reset #commit-2 as "),s("code",[e._v("HEAD")]),e._v(", so, #commit-3 and #commit-4 are removed forever")])])]),s("p",[e._v("["),s("a",{attrs:{href:"https://www.youtube.com/watch?v=RIYrfkZjWmA&ab_channel=TheNetNinja",target:"_blank"}},[e._v("Reference")]),e._v("]")]),s("p",[s("b",[e._v("8.")]),e._v(" -- git logs:")]),s("ul",[s("li",[s("code",[e._v("git reflog")])]),s("li",[s("code",[e._v("git log --oneline")])]),s("li",[s("code",[e._v("git log")])]),s("li",[s("code",[e._v("git diff")])]),s("li",[s("code",[e._v("git show #hash-commit")])])]),s("p",[e._v("*** -- Reference: "),s("a",{attrs:{href:"https://git-scm.com/docs",target:"_blank"}},[e._v("https://git-scm.com/docs")]),e._v(" ***")])])}],!1,null,null,null);t.default=o.exports}}]);