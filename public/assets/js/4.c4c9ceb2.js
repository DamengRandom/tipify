(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{144:function(e,o,n){"use strict";n.r(o);var t=n(0),c=Object(t.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,o=e.$createElement,n=e._self._c||o;return n("div",{staticClass:"content"},[n("h3",{attrs:{id:"docker-basics"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-basics"}},[e._v("#")]),e._v(" Docker Basics")]),n("h4",{attrs:{id:"concept"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[e._v("#")]),e._v(" Concept:")]),n("ul",[n("li",[e._v("like a virtual machine")]),n("li",[e._v("allow developer to packaging up the local application and deploy it to docker environment for running the app")])]),n("h4",{attrs:{id:"common-commands"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#common-commands"}},[e._v("#")]),e._v(" Common Commands:")]),n("ul",[n("li",[n("code",[e._v("docker build -t docker-container-name:latest .")]),e._v(": copy your local app code to docker container")]),n("li",[n("code",[e._v("docker images")]),e._v(": check all images docker are running")]),n("li",[n("code",[e._v("docker ps")]),e._v(": check docker container(s) currently "),n("code",[e._v("up & running")])]),n("li",[n("code",[e._v("docker ps -a")]),e._v(": check all the docker containers (even not running ones)")]),n("li",[n("code",[e._v("docker run -it -p portYouWant:originalPort docker-container-name:latest")]),e._v(": run the docker container !!")]),n("li",[n("code",[e._v("docker stop docker-container-hash-ID")]),e._v(": shutdown docker container from running")]),n("li",[n("code",[e._v("docker container rm docker-container-hash-ID")]),e._v(": remove container from docker containers list")]),n("li",[n("code",[e._v("docker image rm docker-image-hash-ID")]),e._v(": remove docker image from docker images list")]),n("li",[n("code",[e._v("docker container ls -a")]),e._v(": shows all docker containers")]),n("li",[n("code",[e._v("docker pull image-name")]),e._v(": download docker image to local machine [eg: "),n("code",[e._v("docker pull nginx")]),e._v("]")]),n("li",[n("code",[e._v("docker container exec -it container-name bash")]),e._v(": access container from terminal !!!!!!!!")]),n("li",[n("code",[e._v("docker rm $(docker ps -aq) -f")]),e._v(": remove all the docker containers from your local docker environment")])]),n("h4",{attrs:{id:"docker-configuration-commands"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-configuration-commands"}},[e._v("#")]),e._v(" Docker Configuration Commands:")]),n("ul",[n("li",[n("code",[e._v("FROM")]),e._v(": setup the image (which image is going to be used for this docker configuration) [very first step]")]),n("li",[n("code",[e._v("RUN")]),e._v(": execute the commands on top of the current image")]),n("li",[n("code",[e._v("WORKDIR")]),e._v(": setup working directory for "),n("code",[e._v("RUN")]),e._v(", "),n("code",[e._v("CMD")]),e._v(", "),n("code",[e._v("ENTRYPOINT")]),e._v(", "),n("code",[e._v("COPY")]),e._v(" and "),n("code",[e._v("ADD")]),e._v(" instructions that follow it in the "),n("code",[e._v("Dockerfile")])]),n("li",[n("code",[e._v("COPY")]),e._v(": copy local folder path to container folder path (from "),n("code",[e._v("src")]),e._v(" to "),n("code",[e._v("dest")]),e._v(")")]),n("li",[n("code",[e._v("EXPOSE")]),e._v(": tell docker which port need to be listened on at runtime")]),n("li",[n("code",[e._v("ENTRYPOINT")]),e._v(": config executable command, such as "),n("code",[e._v("node")])]),n("li",[n("code",[e._v("CMD")]),e._v(": the following commands after entrypoint, eg: "),n("code",[e._v("server/index.js")]),e._v(", so combine together: "),n("code",[e._v("node server/index.js")])]),n("li",[n("code",[e._v("ENV")]),e._v(": setup environment variable for docker container to read (use)")]),n("li",[n("code",[e._v("ADD")]),e._v(": copy new files/directories from "),n("code",[e._v("src")]),e._v(" to "),n("code",[e._v("dest")])])]),n("h4",{attrs:{id:"general-findings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#general-findings"}},[e._v("#")]),e._v(" General findings:")]),n("ul",[n("li",[n("code",[e._v("docker run -d IMAGE")]),e._v(": "),n("code",[e._v("-d")]),e._v(" means "),n("code",[e._v("--detach")]),e._v(", which refers to a docker container runs in the background of your terminal, which will not show input/output logs in terminal. [Reference "),n("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/container_run/",target:"_blank"}},[e._v("here")]),e._v("]")]),n("li",[n("code",[e._v("docker run -i -t debian /bin/bash")]),e._v(": "),n("code",[e._v("-i")]),e._v(" & "),n("code",[e._v("-t")]),e._v(" means we want an interactive session with a "),n("code",[e._v("tty")]),e._v(" attached. "),n("code",[e._v("tty")]),e._v(" means a terminal which allows user to do input and display the output.\nNormally we have "),n("code",[e._v("-it")]),e._v(" command, which means it make container start look like a terminal connection session. [Reference "),n("a",{attrs:{href:"https://stackoverflow.com/questions/30137135/confused-about-docker-t-option-to-allocate-a-pseudo-tty/54254380",target:"_blank"}},[e._v("here")]),e._v("]")]),n("li",[e._v("Why we need docker-compose? "),n("code",[e._v("docker-compose")]),e._v(" is a "),n("code",[e._v("tool")]),e._v(" for running multiple containers at the same time")]),n("li",[e._v("How to create volume locally?")])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[e._v("docker volume create "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("localstore\n")])])]),n("ul",[n("li",[e._v("Recent Practice: "),n("a",{attrs:{href:"https://github.com/DamengRandom/docker-node-mongo",target:"_blank"}},[e._v("Run A Simple Node API Locally by using Express + MongoDB + Docker")])])]),n("h3",{attrs:{id:"docker-concepts-again"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-concepts-again"}},[e._v("#")]),e._v(" Docker concepts (again):")]),n("ol",[n("li",[n("p",[e._v("Image: can treated as a "),n("code",[e._v("CD")]),e._v(" which contains "),n("code",[e._v("Windows XP OS")]),e._v(" inside")])]),n("li",[n("p",[e._v("Container: "),n("code",[e._v("having image(s)")]),e._v(" inside and also run the image(s), inside container we have "),n("code",[e._v("kernel")]),e._v(" (middleware) to connect processes running on your PC with your PC hardware")])]),n("li",[n("p",[e._v("docker run "),n("code",[e._v("behind the scenes")]),e._v(": docker client (user PC) -> docker server (docker cloud) -> pull/download docker related images (based on commands user typed) -> create a docker container and run the downloaded image\n[Formula: docker run = docker create + docker start]")])]),n("li",[n("p",[n("code",[e._v("docker start -a")]),e._v(": "),n("code",[e._v("-a")]),e._v(" means print the container logs to the user terminal !!!!!")])]),n("li",[n("p",[n("code",[e._v("docker system prune")]),e._v(": "),n("code",[e._v("delete")]),e._v(" all containers & images from your PC")])]),n("li",[n("p",[e._v("docker stop vs kill:\nstop is only for "),n("code",[e._v("stopping")]),e._v(" the container, and having a "),n("code",[e._v("10")]),e._v(" seconds to do some clean up before container get stopped, kill means "),n("code",[e._v("shut down immediately")]),e._v(" no time to do clean up")])]),n("li",[n("p",[e._v("Meaning of "),n("code",[e._v("docker exec -it <container-id> commands")]),e._v(":")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker: docker client \nexec: run another command\n-it: allow developer to provide input for the container\n  -i: allow user to do some input \n  -t: make log more informative (helpful logs will print out)\ncommand: execute the command\n\neg: docker exec -it <redi-container-id> redis-cli\n")])])]),n("ol",{attrs:{start:"8"}},[n("li",[n("p",[n("code",[e._v("docker exec -it <redi-container-id> sh")]),e._v(": sh means shell, which allows developer to type shell commands inside docker container for debugging purposes (Type "),n("code",[e._v("Ctrl + D")]),e._v(" to exit the shell terminal)\n[eg: docker run -it busybox sh]")])]),n("li")])])}],!1,null,null,null);o.default=c.exports}}]);